■Geth
〇ここからダウンロード

https://geth.ethereum.org/downloads/

↓上記が無理ならこちら?
（chromeの「検証」でリンク先をとってきました。windows用。）https://gethstore.blob.core.windows.net/builds/geth-windows-amd64-1.8.8-2688dab4.exe




〇インストール
⇒exeファイルを起動

⇒"I Agree"

⇒Gethにチェックを入れ?⇒Next

⇒インストール先を選択?
（私の場合："C:\tools\ethereum\Geth-1.8.7"）

⇒パスの確認：コマンドプロンプトに"where geth"
geth.exeの場所が表示されればOK



〇初期設定
⇒C:\tools\ethereum\Geth-1.8.7\home\eth_private_netというフォルダを作成

⇒genesis.jsonを作成しそこに入れる（このgithub repositoryに例があるのでそれをそのまま使ってもOK）
	↑初期化時の設定ファイル

⇒各種データを保存するためのディレクトリと設定ファイルを指定して初期化
コマンドプロンプトに下記を入力(うまくいけば"Successfully wrote genesis state"と表示される)
geth --datadir C:\tools\ethereum\Geth-1.8.7\home\eth_private_net init C:\tools\ethereum\Geth-1.8.7\home\eth_private_net\genesis.json

⇒gethの起動
コマンドプロンプトに下記を入力(長いですが一つのコマンドです。一瞬でWelcome to the Geth JavaScript consoleと出なければどこか間違っています。。。)
geth --networkid "10" --nodiscover --datadir "C:\tools\ethereum\Geth-1.8.7\home\eth_private_net" --rpc --rpcaddr "localhost" --rpcport "8545" --rpccorsdomain "*" --rpcapi "eth,net,web3,personal" --targetgaslimit "20000000" console 2>> C:\tools\ethereum\Geth-1.8.7\home\eth_private_net\geth_err.log

〇アカウントの作成
personal.newAccount("パスワード")
これを4回。本番環境用のアカウントを作る場合はちゃんとしたパスワードを！！

〇アカウントの確認
eth.accounts
配列形式なので[0]などで各アカウントを表示

〇ブロックの確認
eth.getBlock(0)
など

〇ブロックからトランザクション確認
eth.getTransactionFromBlock(809)

〇ロック解除
personal.unlockAccount(eth.accounts[0])

〇マイニング開始
miner.start(2)

〇マイニング確認
eth.mining

〇マイニング停止
miner.stop()

〇残高確認
web3.fromWei(eth.getBalance(eth.accounts[0]),"ether")

〇送金
eth.sendTransaction({from: eth.accounts[0], to: eth.accounts[2], value: web3.toWei(5, "ether")})



■Mist Wallet
〇ここからダウンロード
https://github.com/ethereum/mist/releth.getBlock(eases
「Ethereum-Wallet-win64-0-10-0.zip」

〇解凍
exeファイルが、下記のようになるように配置
C:\tools\ethereum\Ethereum-Wallet-win64-0-10-0\Ethereum Wallet.exe

〇起動
gethを起動した状態で、exeファイルを実行
⇒画面右上にprivate-netと表示される
⇒lauch appicationをクリック

■ターミナルから実行
〇コントラクトを定義
var he = eth.contract(インターフェイス).at('アドレス')

例：
var he = eth.contract([ { "constant": false, "inputs": [ { "name": "_msg2", "type": "string" } ], "name": "setMsg2", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "counter", "outputs": [ { "name": "", "type": "uint8", "value": "0" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getMsg2", "outputs": [ { "name": "", "type": "string", "value": "shaft2" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "setCounter", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [ { "name": "", "type": "address", "value": "0xc2012756e80e9dd91e62c5518c965188482412da" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "msg1", "outputs": [ { "name": "", "type": "string", "value": "shaftEthereum" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [ { "name": "_msg1", "type": "string", "index": 0, "typeShort": "string", "bits": "", "displayName": "&thinsp;<span class=\"punctuation\">_</span>&thinsp;msg1", "template": "elements_input_string", "value": "shaftEthereum" } ], "payable": false, "stateMutability": "nonpayable", "type": "constructor" } ]).at('0x4d09bAbc416e386DC42013fB62D7798dc812F96E')

he.adressなどでアクセスできる

〇トランザクションを実行
コントラクト変数名.関数名.sendTransaction(引数, {from: 呼び出し元アドレス, gas:ガスのリミット});
例：
he.setMsg2.sendTransaction("shaft3", {from:eth.accounts[0], gas:5000000});

eth.getTransactionReceipt('')









var he = eth.contract([ { "constant": false, "inputs": [], "name": "checkGoalReached", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "ended", "outputs": [ { "name": "", "type": "bool", "value": false } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "numInvestors", "outputs": [ { "name": "", "type": "uint256", "value": "0" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "totalAmount", "outputs": [ { "name": "", "type": "uint256", "value": "0" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "status", "outputs": [ { "name": "", "type": "string", "value": "Funding" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "goalAmount", "outputs": [ { "name": "", "type": "uint256", "value": "1e+30" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "deadline", "outputs": [ { "name": "", "type": "uint256", "value": "1526823731" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "witdraw", "outputs": [ { "name": "", "type": "bool" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [], "name": "kill", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [ { "name": "", "type": "address" } ], "name": "investors", "outputs": [ { "name": "", "type": "uint256", "value": "0" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [ { "name": "", "type": "address", "value": "0xa774e58aaa6959d781d90fec44b1db13c533b648" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "fund", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "inputs": [ { "name": "_duration", "type": "uint256", "index": 0, "typeShort": "uint", "bits": "256", "displayName": "&thinsp;<span class=\"punctuation\">_</span>&thinsp;duration", "template": "elements_input_uint", "value": "10" }, { "name": "_goalAmount", "type": "uint256", "index": 1, "typeShort": "uint", "bits": "256", "displayName": "&thinsp;<span class=\"punctuation\">_</span>&thinsp;goal Amount", "template": "elements_input_uint", "value": "1000000000000000000000000000000" } ], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "", "type": "string" } ], "name": "MessageLog", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "", "type": "uint256" } ], "name": "BalanceLog", "type": "event" } ]).at('0x08d520B1925e94175F6e761E1601e3558662bA67')

personal.unlockAccount(eth.accounts[0])

he.fund.sendTransaction({from:eth.accounts[2], gas:5000000, value: web3.toWei(7,"ether")})

web3.fromWei(he.totalAmount(),"ether")

he.checkGoalReached.sendTransaction({from:eth.accounts[1], gas:5000000})

he.witdraw({from:eth.accounts[2], gas:5000000})





